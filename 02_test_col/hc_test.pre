#######################################################
#
# This PRE file,
#   02_hc_test/hc_test.pre,
# was generated from the simulation definition file,
#   hc_test.sdf,
# by the sdf2vpre translator.
# Any changes to this file will be lost if the
# translator is rerun.
#
#######################################################

#######################################################
# User defined constants and parameters
#######################################################

$ import verbosity
$ import mathphys

$ VOL_ANODE = (300.0)
$ VOL_GRATE = (4.0)
$ OMEGA = (1e9*2*PI)
$ BIAS_GRATE = (10.0)
$ VOL_CATHODE = (0.0)

#######################################################
# Simulation definition from the basic settings
#######################################################

$ VPMW_COORDINATE_SYSTEM = "cartesian"
# cylindrical not found.
$ VPMW_GRID_SPACING = "uniform"
$ VPMW_NDIM = "2"
$ VPMW_PRECISION = "double"
$ VPMW_USE_GPU = "False"
# electromagnetic not found.
$ VPMW_SIMULATION_TYPE = "electrostatic"
# magnetostatic not found.
# no field solver not found.
# prescribed fields not found.
# electromagnetic.background permittivity not found.
# electromagnetic.dielectric solver not found.
$ VPMW_INCLUDE_PARTICLES = "True"
$ VPMW_MAX_ELECTRON_DENSITY = "1.e18"
$ VPMW_MAX_ELECTRON_TEMP_EV = "1.0"
$ VPMW_DUMP_NODAL_FIELDS = "True"
# reduced not found.
$ VPMW_COLLISIONS_FRAMEWORK = "monte carlo"
# reactions not found.
# reactions.collision order not found.
$ VPMW_RESTORE_GRID_BNDRY = "True"
$ VPMW_DECOMP = "default"
$ VPMW_TOP_LEVEL_VERBOSITY = VPM_INFO
$ VPMW_GRID_TYPE = UniformCartesian

#######################################################
# Import needed system macros
#######################################################

$ import VSim

#######################################################
# User defined functions
#######################################################


#######################################################
# User defined space-time functions
#######################################################

$ GreatVFunc = (VOL_GRATE*sin(OMEGA*t)+BIAS_GRATE)
$ emitGeo = (H(1.5e-3-abs(x)))

#######################################################
#
# Ordered blocks
#
#######################################################

#######################################################
# Translation of the grid
#######################################################

$ VPMW_NUM_GUARD_CELLS = 1
$ VPMW_NUM_GUARD_CELLSP1 = 2
$ VPMW_BGN0 = -2.50000000000000e-03
$ VPMW_BGN1 = -5.00000000000000e-04

$ VPMW_L0 = 5.00000000000000e-03
$ VPMW_L1 = 6.00000000000000e-03

$ VPMW_N0 = int(400)
$ VPMW_N1 = int(480)

# Derived grid variables.  Here for partial processing
$ VPMW_UB0P1 = VPMW_N0 + 1
$ VPMW_UB1P1 = VPMW_N1 + 1
$ VPMW_UB2P1 = VPMW_N2 + 1
$ VPMW_END0 = VPMW_BGN0 + VPMW_L0
$ VPMW_END1 = VPMW_BGN1 + VPMW_L1
$ VPMW_END2 = VPMW_BGN2 + VPMW_L2
# Average cell sizes
$ VPMW_DL0 = VPMW_L0/VPMW_N0
$ VPMW_DL1 = VPMW_L1/VPMW_N1
$ VPMW_DL2 = VPMW_L2/VPMW_N2
$ VPMW_DLI0 = 1./VPMW_DL0
$ VPMW_DLI1 = 1./VPMW_DL1
$ VPMW_DLI2 = 1./VPMW_DL2
$ VPMW_DLISQ = VPMW_DLI0**2 + (VPMW_NDIM>1)*VPMW_DLI1**2 + (VPMW_NDIM>2)*VPMW_DLI2**2
$ VPMW_DLI = math.sqrt(VPMW_DLISQ)

$ VPMW_PERIODIC_DIRS = []

# Requires VPMW_N0[1,2], VPMW_L0[1,2], VPMW_BGN0[1,2]
#
# For UniformCartesian, defines:
#     VPM_NX, VPM_NY, VPM_NZ, VPM_LX, VPM_LY, VPM_LZ,
#     VPM_BGNX, VPM_BGNY, VPM_BGNZ,
#     VPM_ENDX, VPM_ENDY, VPM_ENDZ,
#     VPM_NXP1, VPM_NYP1, VPM_NZP1,
#     VPM_NXM1, VPM_NYM1, VPM_NZM1,
#     VPM_DX, VPM_DY, VPM_DZ,
#     VPM_DXI, VPM_DYI, VPM_DZI,
#     VPM_DL, VPM_DLI
# For Cylindrical, defines:
#     VPM_NZ, VPM_NR, VPM_NPHI, VPM_LZ, VPM_LR, VPM_LPHI,
#     VPM_BGNR, VPM_BGNR, VPM_BGNPHI,
#     VPM_ENDZ, VPM_ENDR, VPM_ENDPHI,
#     VPM_NZP1, VPM_NRP1, VPM_NPHIP1,
#     VPM_NZM1, VPM_NRM1, VPM_NPHIM1,
#     VPM_DZ, VPM_DR, VPM_DPHI,
#     VPM_DZI, VPM_DRI, VPM_DPHII,
#     VPM_DL, VPM_DLI
setGridData()


#######################################################
# Translation of the time group
#######################################################

$ VPMW_DMFRAC = "0.4"
$ VPMW_CFL_NUMBER = "0.95"
$ VPMW_DT = "1e-12"
$ VPMW_NSTEPS = 4000
$ VPMW_DUMP_PERIOD = 500
$ VPMW_DUMP_GROUP_SIZE = "1"

# Requires VPMW_SIMULATION_TYPE
# For Electromagnetic:
#   if VPMW_DT not defined
#     Requires LIGHTSPEED, DLI
#     Will calculate VPMW_DT based on CFL
# For Electrostatic:
#   Requires VPMW_MAX_ELECTRON_DENSITY, VPMW_MAX_ELECTRON_TEMP_EV
setTimingData()

#######################################################
#
# Unordered blocks
#
#######################################################

#######################################################
# Translation of Materials
#######################################################

addConductor(PEC, 0.00000000000000e+00)

#######################################################
# Translation of Shapes
#######################################################

addShape(hc_testPecShapes, hc_testPecShapes.stl, PEC)
addShape(Anode, Anode.stl, PEC)
$ Anode_VPM_PERMITTIVITY = PEC_VPM_PERMITTIVITY
addShape(Cathode, Cathode.stl, PEC)
$ Cathode_VPM_PERMITTIVITY = PEC_VPM_PERMITTIVITY
addShape(GrateArray-GrateGeomSolid, GrateArray-GrateGeomSolid.stl, PEC)

#######################################################
# Translation of Boundary Conditions
#######################################################

addEsDirichletBC(AnodeV, VOL_ANODE, Anode)
addEsDirichletBC(GrateV, GreatVFunc, GrateArray-GrateGeomSolid)
addEsDirichletBC(CathodeV, VOL_CATHODE, Cathode)
addEsNeumannBC(LowerX, 0.0, lowerX)
addEsNeumannBC(UpperX, 0.0, upperX)
addEsDirichletBC(LowerY, VOL_CATHODE, lowerY)
addEsDirichletBC(UpperY, VOL_ANODE, upperY)

#######################################################
# Translation of Solver
#######################################################

addBaseSolver(gmres, 30, classic)
addPreconditioner(multigrid, DD, 10, GaussSeidel, 3, both, Jacobi, 1.33300000000000e+00, 0.00000000000000e+00, increasing)
# This writes preconditioner, so it must be last.
addPoissonSolver(1.0, 1000, 1.00000000000000e-08, r0)

#######################################################
# Translation of Particles
#######################################################

addBeamEmitter(myemit, electrons0, 0.0, 1.0, RichardsonDushmanEmission, 1.0, 14.0, 0.1, 1.0, 700.0, Cathode, 0.1, 1000.0, emitGeo)
addParticleSpeciesSink(GrateAbs, electrons0, absSavTriCutCell, GrateArray-GrateGeomSolid)
addParticleSpecies(electrons0, relBoris, 1.e12, variableWeights, computedWeights, 1.0)

addParticleSpeciesSink(Xe_plus1absSaveCutCell0, Xe_plus1, absSavTriCutCell, Cathode)
addParticleSpecies(Xe_plus1, relBoris, 1., 131.293, 0.0, 1.e12, variableWeights, computedWeights, 1.0)

addParticleSpeciesSink(electrons_colabsSaveCutCell1, electrons_col, absSavTriCutCell, GrateArray-GrateGeomSolid)
addParticleSpecies(electrons_col, relBoris, 1.e12, variableWeights, computedWeights, 1.0)

#######################################################
# Translation of Fluids
#######################################################

addNeutralFluid(Xe, Xe, 131.293, 12.13, 100.0, 300.0, True, [-3e-3, -1e-3, -0.1e-3], [0.0, 6e-3, 0.1e-3])
addImpactIonizationPFMC(particleFluidImpactIonization0, electrons0, Xe, electrons_col, Xe_plus1, EvaluatedElectronDataLibrary, eedl.dat, 1)


#######################################################
# Translation of Histories
#######################################################

addMacroParticleCountHistory(numMacroPtcls0, electrons0)
addParticleEmitterCurrentHistory(emittedCurrent0, myemit)
addMacroParticleCountHistory(num_Xe_plus1, Xe_plus1)
addMacroParticleCountHistory(num_elec_col, electrons_col)

#######################################################
#
# Finalize
#
#######################################################

finalize()

